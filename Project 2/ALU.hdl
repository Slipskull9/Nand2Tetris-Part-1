// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    //nx & ny code
    Not16(in=x1, out=notx);
    Not16(in=y1, out=noty);
    Mux16(a=x1, b=notx, sel=nx, out=x2);
    Mux16(a=y1, b=noty, sel=ny, out=y2);
    //zx & zy code
    Mux16(a=x, b=false, sel=zx, out=x1);
    Mux16(a=y, b=false, sel=zy, out=y1);
    // f code
    Mux16(a=false, b=true, sel=f, out=fout);
    Not16(in=fout, out=notfout);
    And16(a=x2, b=notfout, out=x3);
    And16(a=x2, b=fout, out=x4);
    And16(a=y2, b=notfout, out=y3);
    And16(a=y2, b=fout, out=y4);
    And16(a=x3, b=y3, out=o1);
    Add16(a=x4, b=y4, out=o2);
    Mux16(a=o1, b=o2, sel=f, out=o3);
    // no code
    Mux16(a=false, b=true, sel=no, out=nout);
    Not16(in=nout, out=notnout);
    Not16(in=o3, out=noto3);
    And16(a=notnout, b=o3, out=o4);
    And16(a=nout, b=noto3, out=o5);
    Or16(a=o4, b=o5, out[0..7]=outlh, out[8..15]=outrh, out=out);
    // zr code
    Or8Way(in=outlh, out=so1);
    Or8Way(in=outrh, out=so2);
    Or(a=so1, b=so2, out=zr);
    // ng code
    Or(a=no, b=no, out=ng);
    
    
}